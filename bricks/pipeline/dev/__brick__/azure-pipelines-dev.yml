trigger:
  - dev

#resources:
#- repo: self

variables:
- group: app_version
- name : appMajor
  value: $[variables.major]
- name : appMinor
  value: $[variables.minor]
- name : appPatch
  value: $[variables.patch]
- name : appRevision
  value: $[variables.revision]
- name : appBuildNumber
  value: $[variables.buildNumber]
- name : localBuildName
  value: $(appMajor).$(appMinor).$[$(appPatch)+1].$[$(appRevision)+1]
- name : localBuildNumber
  value: $(appBuildNumber)

stages:
  - stage: FlutterAndroidIOSBuild
    displayName: FlutterPipeline
    jobs:
      - job: FlutterPipelineJob
        displayName: FlutterPipeline 
        pool:
          vmImage: 'macOS-latest' 

        steps:

        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |       
              echo $[$(localBuildNumber)+$(appRevision)+1]      
              echo $(localBuildName)  
              echo $(Build.SourceVersionMessage)

        - task: JavaToolInstaller@0
          displayName: 'Java kur.'
          inputs:
            versionSpec: '11'
            jdkArchitectureOption: 'x64'
            jdkSourceOption: 'PreInstalled'
            
        - task: FlutterInstall@0
          displayName: 'Flutter kur.'
          inputs:
            channel: 'stable'
            version: 'latest'
         
        - task: Bash@3
          displayName: 'Flutter paketleri kur.'
          inputs:
            targetType: 'inline'
            script: '$(FlutterToolPath)/flutter clean && $(FlutterToolPath)/flutter pub get'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: Bash@3
          displayName: 'Flutter dil dosyası yarat.'
          inputs:
            targetType: 'inline'
            script: '$(FlutterToolPath)/flutter gen-l10n'
            workingDirectory: '$(System.DefaultWorkingDirectory)'

        - task: Bash@3
          displayName: 'Flutter kodları yarat.'
          inputs:
            targetType: 'inline'
            script: '$(FlutterToolPath)/flutter pub run build_runner build --delete-conflicting-outputs'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: DownloadSecureFile@1
          displayName: 'KeyProperties getir'
          name: keyProperties
          inputs:
            secureFile: 'key.properties'
        - script: |
            echo Installing $(keyProperties.secureFilePath) to the trusted CA directory...
            sudo chown root:root $(keyProperties.secureFilePath)
            sudo chmod a+r $(keyProperties.secureFilePath)
            cd android/
            touch key.properties
            sudo mv $(keyProperties.secureFilePath) /Users/runner/work/1/s/android/key.properties
          displayName: 'KeyProperties getir'
        - task: DownloadSecureFile@1
          name: keyStore
          inputs:
            secureFile: 'key.keystore'
        - script: |
            echo Installing $(keyStore.secureFilePath) to the trusted CA directory...
            sudo chown root:root $(keyStore.secureFilePath)
            sudo chmod a+r $(keyStore.secureFilePath)
            cd android/app/
            touch key.keystore
            sudo mv $(keyStore.secureFilePath) /Users/runner/work/1/s/android/app/key.keystore
          displayName: 'KeyStore getir'
          
        - task: Bash@3
          displayName: 'AppBundle oluştur.'
          inputs:
            targetType: 'inline'
            script: $(FlutterToolPath)/flutter build appbundle --obfuscate --split-debug-info=./gs/build/outputs  --release  --flavor development --target lib/main_development.dart --build-number  $[$(localBuildNumber)+$(appRevision)+1] --build-name  $(localBuildName)
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: CopyFiles@2
          displayName: 'AppBundle dizine kopyala.'
          inputs:
            contents: '**/*.aab'
            targetFolder: '$(build.artifactStagingDirectory)'
          # TODO! if sorgusu yapılacak 
        - task: AppCenterDistribute@3
          inputs:
            serverEndpoint: '{{androidServerEndpoint}}' ## burası
            appSlug: '{{androidAppSlug}}' ## burası app center da ki uygulama dizini
            appFile: '**/app-development-release.aab' 
            symbolsOption: 'Android'
            releaseNotesOption: 'input'
            releaseNotesInput: '$(Build.SourceVersionMessage)'
            destinationType: 'groups'

        - task: CocoaPods@0
          inputs:
            forceRepoUpdate: true
            projectDirectory: 'ios'
        
        - task: InstallAppleCertificate@2
          inputs:
            certSecureFile: '{{certSecureFile}}' ## dışardan alınacak defualt değer olacak "Certificastes.p12"
            certPwd: '$(certificatePassword)'  
            keychain: 'temp'
            
        - task: InstallAppleProvisioningProfile@1
          inputs:
            provisioningProfileLocation: 'secureFiles'
            provProfileSecureFile: '{{iosServerEndpoint}}' ## Veri dışardan alınacak 
            removeProfile: false

        - task: Bash@3
          displayName: 'ipa oluştur.'
          inputs:
            targetType: 'inline'
            script: $(FlutterToolPath)/flutter build ipa  --no-codesign  --obfuscate --split-debug-info=./ustabilir_mobile/build/outputs  --release  --flavor development --target lib/main_development.dart --build-number  $[$(appRevision)+1] --build-name  $(localBuildName)
            workingDirectory: '$(System.DefaultWorkingDirectory)'
        - task: DownloadSecureFile@1
          displayName: '{{exportOption}} getir' ##ExportOptions.plistt bunlar aynı parametre olacak 
          name: exportOptionsPlistFile
          inputs:
            secureFile: '{{exportOption}}'  ## ismi dışarıdan alıncaak 
        - script: |
            echo Installing $(exportOptionsPlistFile.secureFilePath) to the trusted CA directory...
            sudo chown root:root $(exportOptionsPlistFile.secureFilePath)
            sudo chmod a+r $(exportOptionsPlistFile.secureFilePath)
            touch {{exportOption}}
            sudo mv $(exportOptionsPlistFile.secureFilePath) /Users/runner/work/1/s/build/ios/archive/{{exportOption}}
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: 'xcodebuild -exportArchive -archivePath "/Users/runner/work/1/s/build/ios/archive/Runner.xcarchive" -exportPath "App" -exportOptionsPlist "/Users/runner/work/1/s/build/ios/archive/{{exportOption}}"'

        - task: CopyFiles@2
          displayName: 'ipa dizine kopyala.'
          inputs:
            contents: '/Users/runner/work/1/s/App/Apps/{{projectName.snakeCase()}}.ipa' ## pdks kısmı değişecek projenin ismi olacak 
            targetFolder: '$(build.artifactStagingDirectory)'


        - task: AppCenterDistribute@3
          displayName: 'AppCenter da yayınla.'
          inputs:
            serverEndpoint: 'GSAppCenterIOSConnection'
            appSlug: '{{iosAppSlug}}' ## app centerdaki ios dizini 
            appFile: '/Users/runner/work/1/s/App/Apps/{{projectName.snakeCase()}}.ipa' ## pdks kısmı değişecek projenin ismi olacak  165 gibi
            releaseNotesOption: 'input'
            releaseNotesInput: '$(Build.SourceVersionMessage)'
            destinationType: 'groups'
        
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifacts for IOS'
        
        - task: Bash@3
          displayName: 'Versiyon numarasını guncelle'
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          inputs:
            targetType: 'inline'
            ## group id ve Azur projesinin ismi olacak "Agile - Kurumsal Uygulamalar"  burası 
            script: |
                    echo $SYSTEM_ACCESSTOKEN | az devops login --organization https://dev.azure.com/devops-koctas 
                    az pipelines variable-group variable update --group-id {{groupId}} --name "revision" --value "$[$(appRevision)+1]" --org "https://dev.azure.com/devops-koctas" --project "{{azureProjectName}}" 

                                                                                      

            